if has fragmentation bias in name:
    was constructed using sim without pcr biases, only fragmentation bias
    after using gbmam8 and finding results were good, used ecoli genome

if has pcr bias in name:
    was constructed using sim without fragmentation bias, pcr bias only
    ones graphed right now are only using gbmam8 plasmid genome

if has test or short in name:
    was constructed using first 20000 bases of ecoli genome only

if has ecoli in name: 
    uses full ecoli genome
    using both pcr and fragmentation bias

if has plasmid in name:
    uses plasmid gbmam8 genome

if has optimized_pcr in name:
    uses PCR procedure with Phusion HF & 2M betaine

fasta reads created using 6 & 35 cycles have 30,000 reads; 16 cycle files have 2,000,000 reads


Topics to read about:
pcr amplification bias
single cell amplification bias
mitigating bias

ERRORS
o	A & C error rates: 0.0008 - 0.0016 errors per base
o	G error rates: 0.0010 - 0.0020 errors per base
o	T error rates: 0.0016 - 0.0030 errors per base
o	Error rates increased towards end of the read and are twice as likely to occur on the reverse read
o	For substitutions, A <-> G & C <-> T twice as likely as A <-> C & G <-> T & A <-> T & C <-> G

fwd reads -> .08%*2 + .1% + .16% = .42%
rvs reads -> .16%*2 + .2% + .3% = .84%

o	5 deletions per 1,000,000 nucleotides
o	0.0041 substitutions per base fwd, 0.0099 substitutions per base rvs
o	3 insertions per 1,000,000 nucleotides

fwd reads -> 0.0005% + 0.0003% + 0.41% = 0.4108%
rvs reads -> 0.0005% + 0.0003% + 0.99% = 0.9908%


start with 100 cells and amplify from there
calculate rounds of PCR & see what has been done for limits for pcr
paper did 10 rounds of PCR
get sample to 20 nanograms = 20*10^-9 grams after PCR
GPT got 6 rounds of pcr needed; still need to confirm the math
    - 1 bp is 330 daltons = 5.478x10^-22 grams
    - 1 ecoli genome is 330dalton * 4641652 = 2.542696966x10^-15 grams
    1. get weight of 100 ecoli genomes = 2.542696966x10^-13 grams
    2. (initial weight)*2^n = 20 nanograms -> solve for n = 16.2633 or 17

ecoli genome is 4641652 base pairs long
using optimized_pcr and 35 rounds of pcr got 46416 - 46417 coverage, means all parts covered, lowest coverage amoung is 42, and missing up to 100bp; entropy = 15.410012680091473
using optimized_pcr and 16 rounds of pcr got 46411 - 46417 coverage, lowest coverage amount is 3-6, but has missing up to 600bp; entropy = 15.407858195068188
try using optimized_pcr and 6 rounds of pcr: got 46416-46415 coverage, lowest coverage amount is 2-4, but missing up t0 200bp; entropy = 15.420728512221016

with no pcr bias, got 46417 coverage, this is correct converage to have all parts covered

ASSEMBLY IDEAS:

- dictionary of ACII values of last / first 9bp as keys then sort and match accordingly?
    -need a second key for last 9 bp? -> use a tuple as a key
        - would this incur a longer search time because it needs to search for element in key? -> no longer O(1) for hash table dictionary
    -how to deal with reverse complement?

- sort reads based on character then match to ones nearby?
    - sorting algorithm cost? 
    - merge sort? quicksort?


Seq('GATGTTACC'): 
[Seq('GATGTTACCGGCGGGCTGCAATTTACTTACATATCACTGGATGATTACCGCATT...GCA'), 
Seq('GATGTTACCCGTCGTGGCGTTAAGCAAGTGAAAGGGTTTGGCGACCATCTGACC...CTG'), 
Seq('GATGTTACCCGTCGTGGCGTTAAGCAAGTGAAAGGGTTTGGCGACCATCTGACC...CTG'), 
Seq('GATGTTACCTTCCTGAATCAAATCCGCCTGTGGCAGGCCATAGCCCGCATAATT...GGC'), 
Seq('GATGTTACCTATTCGTCGTGATAGCCCGAAAAAGGCAATTACCTTGATTCTGGC...GCA'), 
Seq('GATGTTACCGGCGGGCTGCAATTTACTTACATATCACTGGATGATTACCGCATT...GCA')]

Seq('TATTACGCA'): 
[Seq('TATTACGCAGTGCAAAAGTGGTATCGGAATGATTCGTGTATTCCTGCATAACAG...ATC'), 
Seq('TATTACGCAGCCCTTCGGGTGTCTCTTTGCTCCCCTTCGCTACGGGTTTATATC...TGA'), 
Seq('TATTACGCAGCCCTTCGGGTGTCTCTTTGCTCCCCTTCGCTACGGGTTTATATC...TGA'), 
Seq('TATTACGCAGTGCAAAAGTGGTATCGGAATGATTCGTGTATTCCTGCATAACAG...ATC'), 
Seq('TATTACGCAGCCCTTCGGGTGTCTCTTTGCTCCCCTTCGCTACGGGTTTATATC...TGA')]

Seq('CCACAATTC'): 
[Seq('CCACAATTCTAGTAGTGAGCCAGGGAAAACGACAGCCAGCGCGTCGCCCTGACC...TGC'), 
Seq('CCACAATTCTAGTAGTGAGCCAGGGAAAACGACAGCCAGCGCGTCGCCCTGACC...TGC'), 
Seq('CCACAATTCCCGGCGTATGCAGCGGCTCGGCGTTGCCCAGCGTTTCGATAATCA...TTG')]

Seq('ATTCCCAGG'): 
[Seq('ATTCCCAGGCTTCCTGTTTCGCCAGGACAGCCTGCAGCAGTTTGTTATTCAGTG...CGG'), 
Seq('ATTCCCAGGGCGCTACAGGACTGCCACTGACCTTCCGGGATCGCACGAATTGCA...GGT'), 
Seq('ATTCCCAGGGATATTGTTGCCAACCATACCAGACAATTCGATCATCAATATTTA...TTT'), 
Seq('ATTCCCAGGCTTCCTGTTTCGCCAGGACAGCCTGCAGCAGTTTGTTATTCAGTG...CGG'), 
Seq('ATTCCCAGGGATATTGTTGCCAACCATACCAGACAATTCGATCATCAATATTTA...TTT'), 
Seq('ATTCCCAGGCTTCCTGTTTCGCCAGGACAGCCTGCAGCAGTTTGTTATTCAGTG...CGG'), 
Seq('ATTCCCAGGGCGCTACAGGACTGCCACTGACCCTCCGGGATCGCACGAATTGCA...GGT')]

100 genomes:
    Number of fwd keys: 202808 Number of rvs keys: 205206
    Keys with Unique fwd sequences: 16940
    Keys with Unique rvs sequences: 18811

10 genomes: 
    Number of fwd keys: 69442 Number of rvs keys: 80655
    Keys with Unique fwd sequences: 12242
    Keys with Unique rvs sequences: 21964

5 genomes:
    Number of fwd keys: 46493 Number of rvs keys: 59454
    Keys with Unique fwd sequences: 14110
    Keys with Unique rvs sequences: 25200    

1 genome:
    Number of fwd keys: 23113 Number of rvs keys: 36591
    Keys with Unique fwd sequences: 14839
    Keys with Unique rvs sequences: 25109


Spades contigs:
- control: 100 genomes, 16 cycles of PCR, no 9bp assembly - 326 contigs of legnth around 130 bp to 110,000 bp, lots more longer reads though
- control: SRA reads - 2156 contigs, length range from 130bp to 67000 bp
- 5 genomes with 9bp assembly - 1931 contigs, legnth ranges from 150bp to 25000 bp
- 1 genome with 9bp assembly - 1076 contigs, length ranges from 130bp to 11000
- 100 genomes with 9bp assembly - 66 contigs with 130bp to 550000 bp in length
- 50 genomes with 9bp assembly - 176 contigs with 130bp to 640000 bp in length, lots of 250,000 bp contigs & 60,000 bp contigs


METRICS:
-N50 ()
-errors (percent of mapped reads match)
-coverage (percentage coverage)

useful resources:
-bwa aligner / long read aligner (alternatives to bowtie)



steps:
-50 & 200 genomes
-report
-do metrics above